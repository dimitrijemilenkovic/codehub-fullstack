import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import VelocityChart from '../charts/VelocityChart.jsx'
import ProgressChart from '../charts/ProgressChart.jsx'
import QuickActions from '../components/QuickActions.jsx'
import Achievements from '../components/Achievements.jsx'
import { api } from '../services/api.js'
import { usePageTitle } from '../hooks/usePageTitle.js'

// Mali kalendar komponenta
function MiniCalendar() {
  const [currentDate] = useState(new Date())
  const [selectedDate, setSelectedDate] = useState(new Date())

  const monthNames = ["Januar", "Februar", "Mart", "April", "Maj", "Jun", 
    "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"]
  
  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()
  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay()
  const startDay = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1 // Ponedeljak = 0

  const days = []
  
  // Prazna polja pre prvog dana
  for (let i = 0; i < startDay; i++) {
    days.push(null)
  }
  
  // Dani u mesecu
  for (let day = 1; day <= daysInMonth; day++) {
    days.push(day)
  }

  const isToday = (day) => {
    const today = new Date()
    return day === today.getDate() && 
           currentDate.getMonth() === today.getMonth() && 
           currentDate.getFullYear() === today.getFullYear()
  }

  return (
    <div className="card" style={{ padding: '32px' }}>
      <h3 style={{ fontWeight: 700, marginBottom: '20px', textAlign: 'center', fontSize: '1.25rem' }}>
        üìÖ {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
      </h3>
      
      {/* Dani u nedelji */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(7, 1fr)', 
        gap: '4px',
        marginBottom: '8px'
      }}>
        {['Po', 'Ut', 'Sr', 'ƒåe', 'Pe', 'Su', 'Ne'].map(day => (
          <div key={day} style={{ 
            textAlign: 'center', 
            fontSize: '0.875rem', 
            fontWeight: 600,
            color: 'var(--color-gray-600)',
            padding: '4px'
          }}>
            {day}
          </div>
        ))}
      </div>
      
      {/* Dani */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(7, 1fr)', 
        gap: '4px'
      }}>
        {days.map((day, index) => (
          <div
            key={index}
            style={{
              minHeight: '40px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1rem',
              fontWeight: isToday(day) ? 700 : 400,
              color: day ? (isToday(day) ? 'var(--color-white)' : 'var(--color-gray-800)') : 'transparent',
              backgroundColor: isToday(day) ? 'var(--color-brand-600)' : 'transparent',
              borderRadius: '6px',
              cursor: day ? 'pointer' : 'default',
              transition: 'all 0.2s ease'
            }}
            onMouseEnter={(e) => {
              if (day && !isToday(day)) {
                e.target.style.backgroundColor = 'var(--color-gray-100)'
              }
            }}
            onMouseLeave={(e) => {
              if (day && !isToday(day)) {
                e.target.style.backgroundColor = 'transparent'
              }
            }}
            onClick={() => {
              if (day) {
                setSelectedDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), day))
              }
            }}
          >
            {day}
          </div>
        ))}
      </div>
    </div>
  )
}

export default function Dashboard(){
  usePageTitle('Dashboard')
  const [velocity, setVelocity] = useState([])
  const [focus, setFocus] = useState([])
  const [loading, setLoading] = useState(true)
  const [taskCounts, setTaskCounts] = useState({
    todo: 0,
    doing: 0,
    done: 0
  })
  const [stats, setStats] = useState({
    totalTasks: 0,
    completedTasks: 0,
    totalSnippets: 0,
    pomodoroSessions: 0,
    currentStreak: 1
  })
  const [toast, setToast] = useState(null)
  const navigate = useNavigate()

  function showToast(message, type = 'success') {
    setToast({ message, type })
    setTimeout(() => setToast(null), 3000)
  }

  useEffect(() => {
    let mounted = true
    async function load(){
      try {
        const [v, f, tasks, snippets] = await Promise.all([
          api.get('/api/metrics/velocity?days=7'),
          api.get('/api/metrics/focus'),
          api.get('/api/tasks'),
          api.get('/api/snippets')
        ])
        if (mounted){
          setVelocity(v)
          setFocus(f)
          
          // Calculate task counts from API data
          const counts = {
            todo: tasks.filter(t => t.status === 'todo').length,
            doing: tasks.filter(t => t.status === 'doing').length,
            done: tasks.filter(t => t.status === 'done').length
          }
          setTaskCounts(counts)
          
          setStats({
            totalTasks: tasks.length,
            completedTasks: counts.done,
            totalSnippets: snippets.length,
            pomodoroSessions: Math.floor(Math.random() * 10), // Mock data
            currentStreak: Math.floor(Math.random() * 7) + 1 // Mock data
          })
        }
      } catch (e) {
        console.error('Failed to load metrics', e)
        // Only set empty arrays if API fails, don't use fallback data
        if (mounted) {
          setVelocity([])
          setFocus([])
        }
      } finally {
        if (mounted) {
          setLoading(false)
        }
      }
    }
    load()
    return () => { mounted = false }
  }, [])

  function handleStatClick(statType) {
    navigate('/tasks', { state: { filter: statType } })
  }

  async function handleTaskAdded(newTask) {
    // Reload data to get updated counts
    try {
      const tasks = await api.get('/api/tasks')
      const counts = {
        todo: tasks.filter(t => t.status === 'todo').length,
        doing: tasks.filter(t => t.status === 'doing').length,
        done: tasks.filter(t => t.status === 'done').length
      }
      setTaskCounts(counts)
      setStats(prev => ({
        ...prev,
        totalTasks: tasks.length,
        completedTasks: counts.done
      }))
      
      // Show toast notification
      showToast('Task je uspe≈°no dodat! üéâ', 'success')
    } catch (e) {
      console.error('Failed to reload tasks:', e)
      showToast('Gre≈°ka prilikom dodavanja taska!', 'error')
    }
    
    // Check for new achievements
    try {
      await api.post('/api/achievements/check')
    } catch (e) {
      console.error('Failed to check achievements:', e)
    }
  }

  return (
    <>
      {/* Toast Notification */}
      {toast && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: toast.type === 'success' 
            ? 'linear-gradient(135deg, #10b981, #059669)' 
            : toast.type === 'error' 
            ? 'linear-gradient(135deg, #ef4444, #dc2626)'
            : 'linear-gradient(135deg, #3b82f6, #2563eb)',
          color: 'white',
          padding: '16px 20px',
          borderRadius: '12px',
          boxShadow: '0 10px 25px rgba(0,0,0,0.2)',
          zIndex: 1000,
          animation: 'slideInRight 0.3s ease-out',
          maxWidth: '300px',
          display: 'flex',
          alignItems: 'center',
          gap: '12px'
        }}>
          <div style={{ fontSize: '20px' }}>
            {toast.type === 'success' ? '‚úÖ' : toast.type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}
          </div>
          <div style={{ fontWeight: 'bold' }}>{toast.message}</div>
        </div>
      )}
      
      <div style={{ display: 'grid', gap: '20px' }}>
        {/* Stats Cards - Clickable with animations */}
        <div className="card" style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(3, 1fr)', 
          gap: '32px',
          padding: '56px',
          background: 'linear-gradient(135deg, #f8fafc, #e2e8f0)',
          border: '1px solid #e2e8f0'
        }}>
          <div 
            className="stat-card-animated"
            style={{ 
              textAlign: 'center',
              cursor: 'pointer',
              padding: '24px',
              borderRadius: '16px',
              transition: 'all 0.3s ease',
              background: 'linear-gradient(135deg, var(--color-brand-50), var(--color-brand-100))'
            }}
            onClick={() => handleStatClick('todo')}
          >
            <div className="stat-icon">üìã</div>
            <div style={{ 
              fontSize: '3rem', 
              fontWeight: 800, 
              color: 'var(--color-brand-600)',
              marginBottom: '8px'
            }}>
              {taskCounts.todo}
            </div>
            <div style={{ 
              fontSize: '1.125rem', 
              fontWeight: 600, 
              color: 'var(--color-gray-600)',
              textTransform: 'uppercase',
              letterSpacing: '0.5px'
            }}>
              To-Do
            </div>
          </div>
          <div 
            className="stat-card-animated"
            style={{ 
              textAlign: 'center',
              cursor: 'pointer',
              padding: '24px',
              borderRadius: '16px',
              transition: 'all 0.3s ease',
              background: 'linear-gradient(135deg, var(--color-orange-50), var(--color-orange-100))'
            }}
            onClick={() => handleStatClick('doing')}
          >
            <div className="stat-icon">‚ö°</div>
            <div style={{ 
              fontSize: '3rem', 
              fontWeight: 800, 
              color: 'var(--color-orange-600)',
              marginBottom: '8px'
            }}>
              {taskCounts.doing}
            </div>
            <div style={{ 
              fontSize: '1.125rem', 
              fontWeight: 600, 
              color: 'var(--color-gray-600)',
              textTransform: 'uppercase',
              letterSpacing: '0.5px'
            }}>
              Doing
            </div>
          </div>
          <div 
            className="stat-card-animated"
            style={{ 
              textAlign: 'center',
              cursor: 'pointer',
              padding: '24px',
              borderRadius: '16px',
              transition: 'all 0.3s ease',
              background: 'linear-gradient(135deg, var(--color-green-50), var(--color-green-100))'
            }}
            onClick={() => handleStatClick('done')}
          >
            <div className="stat-icon">‚úÖ</div>
            <div style={{ 
              fontSize: '3rem', 
              fontWeight: 800, 
              color: 'var(--color-green-600)',
              marginBottom: '8px'
            }}>
              {taskCounts.done}
            </div>
            <div style={{ 
              fontSize: '1.125rem', 
              fontWeight: 600, 
              color: 'var(--color-gray-600)',
              textTransform: 'uppercase',
              letterSpacing: '0.5px'
            }}>
              Done
            </div>
          </div>
        </div>

        {/* Quick Actions i Kalendar - jedan red */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(2, 1fr)', 
          gap: '32px'
        }}>
          {/* Quick Actions */}
          <div style={{
            background: 'linear-gradient(135deg, #fef3c7, #fde68a)',
            borderRadius: '16px',
            padding: '8px',
            border: '1px solid #f59e0b'
          }}>
            <QuickActions onTaskAdded={handleTaskAdded} />
          </div>
          
          {/* Mali Kalendar */}
          <div style={{
            background: 'linear-gradient(135deg, #dbeafe, #bfdbfe)',
            borderRadius: '16px',
            padding: '8px',
            border: '1px solid #3b82f6'
          }}>
            <MiniCalendar />
          </div>
        </div>

        {/* Velocity Chart - puna ≈°irina */}
        <div style={{ 
          width: '100%',
          background: 'linear-gradient(135deg, #f0fdf4, #dcfce7)',
          borderRadius: '16px',
          padding: '8px',
          border: '1px solid #22c55e'
        }}>
          {stats.totalTasks > 0 ? (
            <VelocityChart data={velocity} loading={loading} />
          ) : (
            <div className="card" style={{ 
              padding: '40px', 
              textAlign: 'center',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              minHeight: '350px',
              width: '100%'
            }}>
              <div style={{ fontSize: '4rem', marginBottom: '16px' }}>üìù</div>
              <h3 style={{ 
                fontWeight: 700, 
                marginBottom: '8px', 
                fontSize: '1.375rem',
                color: 'var(--color-gray-700)'
              }}>
                Nemate nijedan task u listi
              </h3>
              <p style={{ 
                color: 'var(--color-gray-500)', 
                fontSize: '1rem',
                margin: 0
              }}>
                Dodajte prvi task da vidite grafikon zavr≈°enih taskova
              </p>
            </div>
          )}
        </div>
        
        {/* Focus Chart - puna ≈°irina */}
        <div style={{ 
          width: '100%',
          background: 'linear-gradient(135deg, #fef2f2, #fecaca)',
          borderRadius: '16px',
          padding: '8px',
          border: '1px solid #ef4444'
        }}>
          <ProgressChart data={focus} loading={loading} />
        </div>

        {/* Achievements Section */}
        <div className="card" style={{
          background: 'linear-gradient(135deg, #fef3c7, #fde68a)',
          border: '1px solid #f59e0b'
        }}>
          <h2 style={{ fontWeight: 700, marginBottom: '28px', display: 'flex', alignItems: 'center', gap: '8px' }}>
            üèÜ Achievements
          </h2>
          <Achievements stats={stats} />
        </div>
      </div>
    </>
  )
}
